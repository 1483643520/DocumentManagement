# Generated by Django 3.0.2 on 2020-01-22 05:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ButtonModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='按钮名称', max_length=50, verbose_name='按钮名称')),
                ('authority', models.CharField(help_text='权限标识', max_length=10, verbose_name='权限标识')),
                ('sort', models.IntegerField(blank=True, default=999, help_text='按钮顺序', null=True, verbose_name='按钮顺序')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='上次修改时间', verbose_name='上次修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '按钮配置表',
                'db_table': 'tb_button',
            },
        ),
        migrations.CreateModel(
            name='DirectoryModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.CharField(blank=True, default='', help_text='菜单图标', max_length=50, null=True, verbose_name='菜单图标')),
                ('is_outside', models.BooleanField(help_text='是否为外链接:true/false', verbose_name='是否为外部链接')),
                ('is_show', models.BooleanField(help_text='非管理员是否可见:true/false', verbose_name='非管理员是否可见')),
                ('name', models.CharField(help_text='菜单名称', max_length=50, verbose_name='菜单名称')),
                ('url', models.CharField(help_text='路由地址', max_length=255, verbose_name='路由地址')),
                ('sort', models.IntegerField(blank=True, default=999, help_text='菜单顺序', null=True, verbose_name='菜单顺序')),
                ('superior', models.IntegerField(blank=True, default=0, help_text='上级菜单ID', null=True, verbose_name='上级菜单ID')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='上次修改时间', verbose_name='上次修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '目录配置表',
                'db_table': 'tb_directory',
            },
        ),
        migrations.CreateModel(
            name='MenuModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.CharField(blank=True, default='', help_text='菜单图标', max_length=50, null=True, verbose_name='菜单图标')),
                ('is_outside', models.BooleanField(help_text='是否为外链接:true/false', verbose_name='是否为外部链接')),
                ('is_show', models.BooleanField(help_text='非管理员是否可见:true/false', verbose_name='非管理员是否可见')),
                ('is_cache', models.BooleanField(help_text='是否菜单缓存:true/false', verbose_name='是否菜单缓存')),
                ('name', models.CharField(help_text='菜单名称', max_length=50, verbose_name='菜单名称')),
                ('authority', models.CharField(help_text='权限标识', max_length=10, verbose_name='权限标识')),
                ('url', models.CharField(help_text='路由地址', max_length=255, verbose_name='路由地址')),
                ('sort', models.IntegerField(blank=True, default=999, help_text='菜单顺序', null=True, verbose_name='菜单顺序')),
                ('component_name', models.CharField(help_text='组件名称', max_length=50, verbose_name='组件名称')),
                ('component_url', models.CharField(help_text='组件路径', max_length=255, verbose_name='组件路径')),
                ('superior_directory', models.CharField(blank=True, default='', help_text='所关联目录ID', max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='所关联目录ID')),
                ('superior_button', models.CharField(blank=True, default='', help_text='所关联按钮', max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='所关联按钮')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='上次修改时间', verbose_name='上次修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '菜单配置表',
                'db_table': 'tb_menu',
            },
        ),
        migrations.CreateModel(
            name='UserRoleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='角色名称', max_length=50, verbose_name='角色名称')),
                ('data_authority', models.CharField(choices=[(1, '所有数据'), (2, '当前用户数据')], help_text='数据权限', max_length=1, verbose_name='数据权限')),
                ('role_authority', models.CharField(help_text='角色权限', max_length=10, verbose_name='角色权限')),
                ('sort', models.IntegerField(blank=True, default=999, help_text='角色顺序', null=True, verbose_name='角色顺序')),
                ('description', models.TextField(blank=True, default='', help_text='角色描述', null=True, verbose_name='角色描述')),
                ('superior_menu', models.CharField(blank=True, default='', help_text='所配置菜单ID集合', max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='所配置菜单ID集合')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='上次修改时间', verbose_name='上次修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '角色配置表',
                'db_table': 'tb_user_role',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, default='', help_text='昵称', max_length=50, null=True, verbose_name='昵称')),
                ('gender', models.IntegerField(choices=[(1, '男'), (2, '女'), (3, '其他')], help_text='性别:1男、2女，3其他', verbose_name='性别')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default='', help_text='电话', max_length=128, null=True, region=None, verbose_name='电话')),
                ('superior_role', models.CharField(blank=True, default='', help_text='所关联角色', max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='所关联角色')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户注册表',
                'verbose_name_plural': '用户注册表',
                'db_table': 'tb_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
